{"ast":null,"code":"import invariant from 'invariant';\nimport { setClientOffset } from './local/setClientOffset';\nimport { isObject } from '../../utils/js_utils';\nimport { BEGIN_DRAG, INIT_COORDS } from './types';\nvar ResetCoordinatesAction = {\n  type: INIT_COORDS,\n  payload: {\n    clientOffset: null,\n    sourceClientOffset: null\n  }\n};\nexport default function createBeginDrag(manager) {\n  return function beginDrag() {\n    var sourceIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      publishSource: true\n    };\n    var _options$publishSourc = options.publishSource,\n        publishSource = _options$publishSourc === void 0 ? true : _options$publishSourc,\n        clientOffset = options.clientOffset,\n        getSourceClientOffset = options.getSourceClientOffset;\n    var monitor = manager.getMonitor();\n    var registry = manager.getRegistry(); // Initialize the coordinates using the client offset\n\n    manager.dispatch(setClientOffset(clientOffset));\n    verifyInvariants(sourceIds, monitor, registry); // Get the draggable source\n\n    var sourceId = getDraggableSource(sourceIds, monitor);\n\n    if (sourceId === null) {\n      manager.dispatch(ResetCoordinatesAction);\n      return;\n    } // Get the source client offset\n\n\n    var sourceClientOffset = null;\n\n    if (clientOffset) {\n      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n      sourceClientOffset = getSourceClientOffset(sourceId);\n    } // Initialize the full coordinates\n\n\n    manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));\n    var source = registry.getSource(sourceId);\n    var item = source.beginDrag(monitor, sourceId);\n    verifyItemIsObject(item);\n    registry.pinSource(sourceId);\n    var itemType = registry.getSourceType(sourceId);\n    return {\n      type: BEGIN_DRAG,\n      payload: {\n        itemType: itemType,\n        item: item,\n        sourceId: sourceId,\n        clientOffset: clientOffset || null,\n        sourceClientOffset: sourceClientOffset || null,\n        isSourcePublic: !!publishSource\n      }\n    };\n  };\n}\n\nfunction verifyInvariants(sourceIds, monitor, registry) {\n  invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n  sourceIds.forEach(function (sourceId) {\n    invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n  });\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n  invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\n\nfunction verifyItemIsObject(item) {\n  invariant(isObject(item), 'Item must be an object.');\n}\n\nfunction getDraggableSource(sourceIds, monitor) {\n  var sourceId = null;\n\n  for (var i = sourceIds.length - 1; i >= 0; i--) {\n    if (monitor.canDragSource(sourceIds[i])) {\n      sourceId = sourceIds[i];\n      break;\n    }\n  }\n\n  return sourceId;\n}","map":{"version":3,"names":["invariant","setClientOffset","isObject","BEGIN_DRAG","INIT_COORDS","ResetCoordinatesAction","type","payload","clientOffset","sourceClientOffset","createBeginDrag","manager","beginDrag","sourceIds","arguments","length","undefined","options","publishSource","_options$publishSourc","getSourceClientOffset","monitor","getMonitor","registry","getRegistry","dispatch","verifyInvariants","sourceId","getDraggableSource","verifyGetSourceClientOffsetIsFunction","source","getSource","item","verifyItemIsObject","pinSource","itemType","getSourceType","isSourcePublic","isDragging","forEach","i","canDragSource"],"sources":["/Users/ys-admin/Personal/todo_list_frontend/node_modules/dnd-core/dist/esm/actions/dragDrop/beginDrag.js"],"sourcesContent":["import invariant from 'invariant';\nimport { setClientOffset } from './local/setClientOffset';\nimport { isObject } from '../../utils/js_utils';\nimport { BEGIN_DRAG, INIT_COORDS } from './types';\nvar ResetCoordinatesAction = {\n  type: INIT_COORDS,\n  payload: {\n    clientOffset: null,\n    sourceClientOffset: null\n  }\n};\nexport default function createBeginDrag(manager) {\n  return function beginDrag() {\n    var sourceIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      publishSource: true\n    };\n    var _options$publishSourc = options.publishSource,\n        publishSource = _options$publishSourc === void 0 ? true : _options$publishSourc,\n        clientOffset = options.clientOffset,\n        getSourceClientOffset = options.getSourceClientOffset;\n    var monitor = manager.getMonitor();\n    var registry = manager.getRegistry(); // Initialize the coordinates using the client offset\n\n    manager.dispatch(setClientOffset(clientOffset));\n    verifyInvariants(sourceIds, monitor, registry); // Get the draggable source\n\n    var sourceId = getDraggableSource(sourceIds, monitor);\n\n    if (sourceId === null) {\n      manager.dispatch(ResetCoordinatesAction);\n      return;\n    } // Get the source client offset\n\n\n    var sourceClientOffset = null;\n\n    if (clientOffset) {\n      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n      sourceClientOffset = getSourceClientOffset(sourceId);\n    } // Initialize the full coordinates\n\n\n    manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));\n    var source = registry.getSource(sourceId);\n    var item = source.beginDrag(monitor, sourceId);\n    verifyItemIsObject(item);\n    registry.pinSource(sourceId);\n    var itemType = registry.getSourceType(sourceId);\n    return {\n      type: BEGIN_DRAG,\n      payload: {\n        itemType: itemType,\n        item: item,\n        sourceId: sourceId,\n        clientOffset: clientOffset || null,\n        sourceClientOffset: sourceClientOffset || null,\n        isSourcePublic: !!publishSource\n      }\n    };\n  };\n}\n\nfunction verifyInvariants(sourceIds, monitor, registry) {\n  invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n  sourceIds.forEach(function (sourceId) {\n    invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n  });\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n  invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\n\nfunction verifyItemIsObject(item) {\n  invariant(isObject(item), 'Item must be an object.');\n}\n\nfunction getDraggableSource(sourceIds, monitor) {\n  var sourceId = null;\n\n  for (var i = sourceIds.length - 1; i >= 0; i--) {\n    if (monitor.canDragSource(sourceIds[i])) {\n      sourceId = sourceIds[i];\n      break;\n    }\n  }\n\n  return sourceId;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}